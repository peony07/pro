<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	">
	
    <!-- 自动扫描业务包 --> 
    <context:component-scan base-package="com.sc.pro.business">
        <context:include-filter type="regex" expression=".*.dao.*"/>
        <context:include-filter type="regex" expression=".*.service.*"/>
    </context:component-scan>

    <!-- 引入jdbc配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!-- 阿里巴巴druid数据连接池 -->
    <!-- Druid内置提供一个StatFilter，用于统计监控信息。 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- StatFilter属性slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。slowSqlMillis的缺省值为3000，也就是3秒。 -->
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>

        <!--  SQL合并配置,在druid-0.2.17版本之后，sql合并支持tddl，能够对分表进行合并。 -->
        <property name="mergeSql" value="true"/>
    </bean>
    <!-- 防止SQL注入 -->
    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
       <!-- 指定配置装载的目录  -->
        <property name="dir" value="META-INF/druid/wall/mysql"/>  
    </bean>
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql"/>
        <property name="config" ref="wall-filter-config"/>
    </bean>
    <!-- 输出可执行的SQL -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>
    <!-- druid viki上提供配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc_driverClass}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <!--<property name="filters" value="stat,log4j" /> --><!-- 别名配置方式，支持多个。别名映射配置信息保存在druid-xxx.jar!/META-INF/druid-filter.properties。 -->
        <!--<property name="filters" value="log4j" /> -->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
            </list>
        </property>

        <!-- 在Druid-0.2.17版本之后，支持配置公用监控数据 -->
<!--         <property name="useGloalDataSourceStat" value="true"/> -->

        <!-- 连接泄漏: 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开-->
        <property name="removeAbandoned" value="false"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true"/>
        <!-- 关闭abanded连接时输出错误日志 -->
    </bean>


    <!-- 配置Druid和Spring关联监控配置 start-->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <!-- 方法名正则匹配拦截配置 -->
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.sc.pro.business.*.service.*</value>
                <value>com.sc.pro.business.*.dao.*</value>
            </list>
        </property>
    </bean>
    <aop:config><!-- proxy-target-class="true" -->
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
    <!-- 配置Druid和Spring关联监控配置 end -->

    <!-- mybatis文件配置，扫描所有mapper文件  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations" value="classpath:conf/mapper/*Mapper.xml"/>
        <!-- 添加插件 -->  
        <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		          </value>
		        </property>
		      </bean>
		    </array>
	  </property>
    </bean>
    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sc.pro.business.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
		
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- spring_jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <!-- 对数据源进行事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="dataSource" />  
	</bean> 

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	
    <!-- aop切面事务控制,匹配方法名 -->
    <tx:advice id="txProxyAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="validate*" propagation="REQUIRED"
                       read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="remove*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="create*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="modify*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception,org.springframework.dao.DataAccessException"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!-- 定义到service方法上事务控制 ,匹配规则 public修饰  其他修饰符*（static） 包名.类名*.方法名* -->
        <aop:pointcut id="transactionPointcut" expression="execution( * com.sc.pro.business.*.service.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="txProxyAdvice"/>
    </aop:config>
	
		<import resource="classpath:conf/spring/spring-config-redis.xml"/>
		
		

</beans>